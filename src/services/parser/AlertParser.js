import { v4 as uuidv4 } from "uuid";
import { AlertStatus } from "../../models/AlertStatus.js";

const alertStatus = new AlertStatus();

function normalizeLocation(location) {
  return location.toLowerCase().replace(/[.,\-!]+/g, "").replace(/\s+/g, " ").trim();
}

const alertSounds = {
  "–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞": "air_alert_sound",
  "—Ö—ñ–º—ñ—á–Ω–∞": "chemical_alert_sound",
  "—Ä–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞": "radiation_alert_sound",
  "–≤—ñ–¥–±—ñ–π-–ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó": "air_alert_sound",
  "–≤—ñ–¥–±—ñ–π-—Ö—ñ–º—ñ—á–Ω–æ—ó": "chemical_alert_sound",
  "–≤—ñ–¥–±—ñ–π-—Ä–∞–¥—ñ–∞—Ü—ñ–π–Ω–æ—ó": "radiation_alert_sound",
};

export function alertMessage(rawText, sourceId) {
  const lines = rawText.split("\n").map(line => line.trim());
  const now = new Date().toISOString();
  const alerts = [];

  for (const line of lines) {
    if (/^–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É/i.test(line)) continue;

    const matchAirActive = line.match(/üî¥\s*(.+?)\s*-\s*–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!?/i);
    if (matchAirActive) {
      const rawLocation = matchAirActive[1].trim();
      const location = normalizeLocation(rawLocation);

      alertStatus.addAlert(location, "–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞");

      alerts.push({
        id: uuidv4(),
        type: "alarm_started",
        payload: {
          location,
          text: line,
          detectedAt: now,
          sourceId,
          alertType: "–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞",
          sound: alertSounds["–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞"],
          currentStatus: alertStatus.toObject()
        }
      });

      console.log("–ü–æ—á–∞—Ç–æ–∫ –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏:", location);
      continue;
    }

    const matchAirCleared = line.match(/üü°\s*(.+?)\s*-\s*–≤—ñ–¥–±—ñ–π –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏!?/i);
    if (matchAirCleared) {
      const rawLocation = matchAirCleared[1].trim();
      const location = normalizeLocation(rawLocation);

      alertStatus.clearAlert(location, "–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞");

      alerts.push({
        id: uuidv4(),
        type: "alarm_cleared",
        payload: {
          location,
          text: line,
          detectedAt: now,
          sourceId,
          alertType: "–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞",
          sound: alertSounds["–≤—ñ–¥–±—ñ–π-–ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó"],
          currentStatus: alertStatus.toObject()
        }
      });

      console.log("–í—ñ–¥–±—ñ–π –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏:", location);
      continue;
    }

    const matchChemicalActive = line.match(/üî¥\s*(.+?)\s*-\s*—Ö—ñ–º—ñ—á–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!?/i);
    if (matchChemicalActive) {
      const rawLocation = matchChemicalActive[1].trim();
      const location = normalizeLocation(rawLocation);

      alertStatus.addAlert(location, "—Ö—ñ–º—ñ—á–Ω–∞");

      alerts.push({
        id: uuidv4(),
        type: "alarm_started",
        payload: {
          location,
          text: line,
          detectedAt: now,
          sourceId,
          alertType: "—Ö—ñ–º—ñ—á–Ω–∞",
          sound: alertSounds["—Ö—ñ–º—ñ—á–Ω–∞"],
          currentStatus: alertStatus.toObject()
        }
      });

      console.log("–ü–æ—á–∞—Ç–æ–∫ —Ö—ñ–º—ñ—á–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏:", location);
      continue;
    }

    const matchChemicalCleared = line.match(/üü°\s*(.+?)\s*-\s*–≤—ñ–¥–±—ñ–π —Ö—ñ–º—ñ—á–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏!?/i);
    if (matchChemicalCleared) {
      const rawLocation = matchChemicalCleared[1].trim();
      const location = normalizeLocation(rawLocation);

      alertStatus.clearAlert(location, "—Ö—ñ–º—ñ—á–Ω–∞");

      alerts.push({
        id: uuidv4(),
        type: "alarm_cleared",
        payload: {
          location,
          text: line,
          detectedAt: now,
          sourceId,
          alertType: "—Ö—ñ–º—ñ—á–Ω–∞",
          sound: alertSounds["–≤—ñ–¥–±—ñ–π-—Ö—ñ–º—ñ—á–Ω–æ—ó"],
          currentStatus: alertStatus.toObject()
        }
      });

      console.log("–í—ñ–¥–±—ñ–π —Ö—ñ–º—ñ—á–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏:", location);
      continue;
    }

    const matchRadiationActive = line.match(/üî¥\s*(.+?)\s*-\s*—Ä–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!?/i);
    if (matchRadiationActive) {
      const rawLocation = matchRadiationActive[1].trim();
      const location = normalizeLocation(rawLocation);

      alertStatus.addAlert(location, "—Ä–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞");

      alerts.push({
        id: uuidv4(),
        type: "alarm_started",
        payload: {
          location,
          text: line,
          detectedAt: now,
          sourceId,
          alertType: "—Ä–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞",
          sound: alertSounds["—Ä–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞"],
          currentStatus: alertStatus.toObject()
        }
      });

      console.log("–ü–æ—á–∞—Ç–æ–∫ —Ä–∞–¥—ñ–∞—Ü—ñ–π–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏:", location);
      continue;
    }

    const matchRadiationCleared = line.match(/üü°\s*(.+?)\s*-\s*–≤—ñ–¥–±—ñ–π —Ä–∞–¥—ñ–∞—Ü—ñ–π–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏!?/i);
    if (matchRadiationCleared) {
      const rawLocation = matchRadiationCleared[1].trim();
      const location = normalizeLocation(rawLocation);

      alertStatus.clearAlert(location, "—Ä–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞");

      alerts.push({
        id: uuidv4(),
        type: "alarm_cleared",
        payload: {
          location,
          text: line,
          detectedAt: now,
          sourceId,
          alertType: "—Ä–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞",
          sound: alertSounds["–≤—ñ–¥–±—ñ–π-—Ä–∞–¥—ñ–∞—Ü—ñ–π–Ω–æ—ó"],
          currentStatus: alertStatus.toObject()
        }
      });

      console.log("–í—ñ–¥–±—ñ–π —Ä–∞–¥—ñ–∞—Ü—ñ–π–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏:", location);
      continue;
    }
  }

  return alerts.length ? alerts : null;
}
