function cleanInvisibleChars(str) {
    if (!str) return '';
    return str.replace(/[\u200B-\u200D\uFE0E\uFE0F]/g, '').trim();
}

function extractWarningText(rawText) {
    if (!rawText) return '';
    const lines = rawText.split('\n').map(line => line.trim()).filter(Boolean);
    return lines[lines.length - 1];
}

export function parseTargetTeleg(targetObj) {
    if (!targetObj) return '';

    const city = cleanInvisibleChars(targetObj.city);
    const region = cleanInvisibleChars(targetObj.region);
    const type = cleanInvisibleChars(targetObj.type);

    let emoji = '‚ùóÔ∏è';
    const typeLower = type.toLowerCase();

    if (typeLower.includes('–∞—Ä—Ç–∏–ª–µ—Ä—ñ—ó') || typeLower.includes('–æ–±—Å—Ç—Ä—ñ–ª—É')) emoji = 'üí•';
    else if (typeLower.includes('—Ä–∞–∫–µ—Ç')) emoji = 'üöÄ';
    else if (typeLower.includes('–¥—Ä–æ–Ω') || typeLower.includes('–±–ø–ª–∞')) emoji = 'üõ∏';
    else if (typeLower.includes('–∞–≤—ñ–∞—Ü—ñ—è') || typeLower.includes('–∫–∞–±') || typeLower.includes('–±–æ–º–±–∞')) emoji = '‚úàÔ∏è';
    else emoji = '‚ö†Ô∏è';

    const locationParts = [region, city].filter(Boolean);
    const location = locationParts.join(', ');

    let message = '';
    message += `${emoji} –£–≤–∞–≥–∞!!!\n\n`;
    message += `üìç ${location || '–Ω–µ–≤—ñ–¥–æ–º–∞ –ª–æ–∫–∞—Ü—ñ—è'}\n`;
    message += `üéØ –¢–∏–ø –∑–∞–≥—Ä–æ–∑–∏: ${type || '–Ω–µ–≤—ñ–¥–æ–º–æ'}\n\n`
    message += `‚û°Ô∏è ${extractWarningText(targetObj.rawText) ? extractWarningText(targetObj.rawText) + ' –ù–µ–≥–∞–π–Ω–æ –ø—Ä—è–º—É–π—Ç–µ –≤ —É–∫—Ä–∏—Ç—Ç—è!' : '–ù–µ–≥–∞–π–Ω–æ –ø—Ä—è–º—É–π—Ç–µ –≤ —É–∫—Ä–∏—Ç—Ç—è!'}`;



    return message.trim();
}
