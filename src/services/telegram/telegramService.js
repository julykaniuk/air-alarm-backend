import { TelegramClient } from "telegram/index.js";
import { StringSession } from "telegram/sessions/index.js";
import { NewMessage } from "telegram/events/index.js";
import { alertMessage } from "../parser/AlertParser.js";
import { targetMessage } from "../parser/TargetParser.js";

import fs from "fs/promises";
import input from "input";

export async function startTelegramService(broadcast) {
  const apiId = Number(process.env.API_ID);
  const apiHash = process.env.API_HASH;
    const sessionFile = "./session.txt";
  
    let stringSession;
  
    try {
      const savedSession = await fs.readFile(sessionFile, "utf8");
      stringSession = new StringSession(savedSession.trim());
      console.log("–°–µ—Å—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞, –≤—Ö—ñ–¥ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.");
    } catch {
      stringSession = new StringSession("");
      console.log("–°–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é.");
    }
  
    const client = new TelegramClient(stringSession, apiId, apiHash, {
      connectionRetries: 5,
    });
  
    await client.start({
      phoneNumber: async () => await input.text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: "),
      password: async () => await input.text("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å (2FA, —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ): "),
      phoneCode: async () => await input.text("–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∑ Telegram: "),
      onError: (err) => console.log("–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:", err),
    });
  
    console.log("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ!");
  
    await fs.writeFile(sessionFile, client.session.save());
    console.log("–°–µ—Å—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª session.txt");

  client.addEventHandler(
      async (event) => {
        const rawText = event.message.message;
        const sourceId = event.chat?.username || 'unknown';

        console.log("üî¥ –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", rawText);

        const alertParsed = alertMessage(rawText, sourceId);
        const targetParsed = targetMessage(rawText, sourceId);

        console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥—É —Ü—ñ–ª–µ–π:", targetParsed);
        console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥—É —Ç—Ä–∏–≤–æ–≥:", alertParsed);

        if (targetParsed && Array.isArray(targetParsed) && targetParsed.length > 0) {
          targetParsed.forEach(target => {
            const messageToBroadcast = {
              type: target.type,
              payload: {
                id: target.id,
                sourceId: target.sourceId,
                type: target.type,
                direction: target.direction,
                coordinates: target.coordinates,
                city: target.city,
                district: target.district,
                territory: target.territory,
                region: target.region,
                locationName: target.locationName,
                detectedAt: target.detectedAt,
                rawText: target.rawText,
                color: target.color,
                sound: target.sound,
                code: target.code,
              },
            };

            console.log("Broadcast –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", JSON.stringify(messageToBroadcast, null, 2));

            broadcast(messageToBroadcast);
          });
        } else {
          console.log("–¶—ñ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ç–æ–π");
        }

        if (alertParsed && Array.isArray(alertParsed) && alertParsed.length > 0) {
          alertParsed.forEach(alert => {
            const messageToBroadcast = {
              type: alert.type,
              payload: alert.payload,
            };

            console.log("Broadcast –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", JSON.stringify(messageToBroadcast, null, 2));

            broadcast(messageToBroadcast);
          });
        } else {
          console.log("–¢—Ä–∏–≤–æ–≥–∏ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ");
        }
      },
  new NewMessage({ chats: ["@test_backend_test"] })
    );
  }